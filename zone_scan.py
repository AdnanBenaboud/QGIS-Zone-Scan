# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Zonescan
                                 A QGIS plugin
 Point selection, buffer creation, intersection analysis, and reporting
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Adnan Benaboud
        email                : adnanbenaboud5@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import subprocess
import sys
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor, QFont, QPixmap,QImage, QPainter
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QMessageBox
from qgis.core import QgsMapLayerProxyModel, QgsProject, QgsVectorLayer, QgsGeometry, QgsPointXY, QgsFeature, QgsDistanceArea, QgsLayoutItemPicture, QgsLayoutItemLabel,QgsLayoutPoint, QgsLayoutSize, QgsUnitTypes, QgsLayoutExporter, QgsPrintLayout,QgsCoordinateReferenceSystem, QgsRectangle, QgsLayoutItemPage


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .zone_scan_dialog import ZonescanDialog
import os.path


from qgis.gui import QgsMapToolEmitPoint

 ################ AYMANE ####################

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QSettings
from qgis.PyQt.QtGui import QIcon,QFont, QFontMetrics
from qgis.PyQt.QtWidgets import QAction, QCheckBox
import datetime
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path
from .lib.toMakeRequest import SentinelDownloader, get_time_ranges
from .lib.createJobs import create_windows_task, write_download_script
from qgis import processing
from qgis.PyQt.QtWidgets import *

from qgis.core import *
from qgis.analysis import (
    QgsRasterCalculator,
    QgsRasterCalculatorEntry,
)

import platform

from qgis.core import QgsProject, QgsVectorLayer, QgsMapLayer, QgsRasterLayer

 ############################################

class Zonescan:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = self.iface.mapCanvas()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        self.addPoint = QgsMapToolEmitPoint(self.canvas)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Zonescan_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Zone Scan')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        ################ AYMANE #####################
        self.plugin_dir = os.path.dirname(__file__)
        self.jobs_dir = os.path.join(self.plugin_dir, 'jobs')
        os.makedirs(self.jobs_dir, exist_ok=True)
        self.settings = QSettings()
        #############################################


        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Zonescan', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/zone_scan/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Zone Scan'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Zone Scan'),
                action)
            self.iface.removeToolBarIcon(action)
    
    

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ZonescanDialog()
            self.dlg.btnSelect.clicked.connect(self.clickingSelect)
            self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dlg.pdfFileWidget.setFilter("PDF (*.pdf)")
            self.dlg.btnCancel.clicked.connect(self.cancel)
            self.dlg.btnAddAllLayers.clicked.connect(self.addAllLayers)
            self.dlg.btnAddLayer.clicked.connect(self.addSepartly)
            self.dlg.btnDelete.clicked.connect(self.On_Delete_Click)
            self.dlg.btnAnalyze.clicked.connect(self.analyze)
            self.dlg.btnGenereatePdf.clicked.connect(self.exportToPDF)


            ################ AYMANE #####################
            if not self.settings.value("Zonescan/deps_installed", False, type=bool):
                self.download_dependencies()


            self.load_indexes()
            self.dlg.run_image_sat.clicked.connect(self.run_downloads_and_schedule)

            self.dlg.cloud_coverage.valueChanged.connect(
            lambda v: self.dlg.label_value.setText(f"{v}%"))
            self.dlg.label_value.setText(f"{self.dlg.cloud_coverage.value()}%")
            self.dlg.checkbox_schedule.stateChanged.connect(self.enable_schedule_options)

            # self.dlg.progress_image_sat.setEnabled(False)
            # self.dlg.progress_image_sat.setRange(0, 0)
        self.dlg.progress_image_sat.setValue(0)
            ############################################

        print("Current plugin dir: ", self.plugin_dir)
        print("Current jobs dir: ", self.jobs_dir)
        
        self.reset_ui()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def reset_ui(self):
        self.dlg.spnboxLat.setValue(0.0)
        self.dlg.spnboxLon.setValue(0.0)
        self.dlg.spnboxBuffer.setValue(0.0)

        self.dlg.tblLayers.setRowCount(0)

        self.dlg.tblResultlayers.setRowCount(0)

        self.dlg.bufferNameLayer.setText("Buffer Layer")
        self.dlg.pointNameLayer.setText("Point Layer")

    def cancel(self):
        self.reset_ui()
        self.dlg.close()

  
    def evaluatePoint(self,point,button):
        self.dlg.spnboxLat.setValue(point.y())
        self.dlg.spnboxLon.setValue(point.x())
        self.dlg.show()

        self.addPoint.canvasClicked.disconnect(self.evaluatePoint)
        self.iface.mapCanvas().unsetMapTool(self.addPoint)

    def clickingSelect(self):
        self.dlg.hide()
        self.canvas.setMapTool(self.addPoint)
        try:
            self.addPoint.canvasClicked.disconnect()
        except:
            pass
        self.addPoint.canvasClicked.connect(self.evaluatePoint)

    def addAllLayers(self):
        layers = QgsProject.instance().mapLayers().values()
    
        for layer in layers:
            if isinstance(layer, QgsVectorLayer):
                row = self.dlg.tblLayers.rowCount()
                self.dlg.tblLayers.insertRow(row)
                self.dlg.tblLayers.setItem(row,0,QTableWidgetItem(layer.name()))

    def addSepartly(self):
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        row = self.dlg.tblLayers.rowCount()
        self.dlg.tblLayers.insertRow(row)
        self.dlg.tblLayers.setItem(row,0,QTableWidgetItem(layer.name()))

        


    def On_Delete_Click(self):
        SelectedRow = self.dlg.tblLayers.currentRow()
        rowcount = self.dlg.tblLayers.rowCount()

        if rowcount==0:  # gives a pop up when now more rows are there to delete
            QMessageBox.information(self.dlg,'Delete Layer',"No more rows to delete!")



        elif SelectedRow==-1: # Gives pop up when no rows are selected
            QMessageBox.information(self.dlg,'Delete Layer',"Please select the row to be deleted!")


        else:
            self.dlg.tblLayers.removeRow(SelectedRow)

    def analyze(self):
        all_layers = QgsProject().instance().mapLayers().values()
        layers_in_name = []
        layers_in = []
        row = self.dlg.tblLayers.rowCount()
        for i in range(row):
            item = self.dlg.tblLayers.item(i, 0)
            if item is not None:
                layers_in_name.append(item.text())

        for i in all_layers:
            if i.name() in layers_in_name:
                layers_in.append(i)


        project_crs = QgsProject().instance().crs().authid()
        uri = "polygon?crs="+str(project_crs).lower()+"&field=id:integer"
        uri_point = "point?crs="+str(project_crs).lower()+"&field=id:integer"
        BufferLayer = QgsVectorLayer(uri, self.dlg.bufferNameLayer.text(),  "memory")
        LocalisationLayer = QgsVectorLayer(uri_point, self.dlg.pointNameLayer.text(),  "memory")


        if not BufferLayer.isValid():
            print("Buffer layer creation failed!")
            return
        if not LocalisationLayer.isValid():
            print("Point layer creation failed!")
            return
        

        valLat = self.dlg.spnboxLat.value()
        valLon = self.dlg.spnboxLon.value()
        valBuffer = self.dlg.spnboxBuffer.value()

        point = QgsPointXY(valLon, valLat)
        geom = QgsGeometry.fromPointXY(point)

        buffer = geom.buffer(valBuffer,20)

        ftrPoint = QgsFeature(LocalisationLayer.fields())
        ftrPoint.setAttribute("id",1)
        ftrPoint.setGeometry(geom)

        ftrBuffer = QgsFeature(BufferLayer.fields())
        ftrBuffer.setAttribute("id",1)
        ftrBuffer.setGeometry(buffer)

        pr = LocalisationLayer.dataProvider()
        pr.addFeatures([ftrPoint])

        pr = BufferLayer.dataProvider()
        pr.addFeatures([ftrBuffer])
        symbol_layer = BufferLayer.renderer().symbol().symbolLayer(0)
        symbol_layer.setFillColor(QColor(0, 0, 0, 0))  # fully transparent fill
        symbol_layer.setStrokeColor(QColor("red"))
        symbol_layer.setStrokeWidth(1.0)
        BufferLayer.triggerRepaint()
        BufferLayer.reload()

        bb = buffer.boundingBox()

        for layer in layers_in:
            layer_in_bb = layer.getFeatures(bb)
            for feature in layer_in_bb:
                OBJECTID = feature.attribute("OBJECTID")
                Distance = feature.geometry().distance(geom)
                disarea = QgsDistanceArea()
                total_area = disarea.measureArea(feature.geometry())
                intersection = feature.geometry().intersection(buffer)
                intersection_area = disarea.measureArea(intersection)
                percentage = (intersection_area/total_area)*100
                if Distance < valBuffer:
                    row = self.dlg.tblResultlayers.rowCount()
                    self.dlg.tblResultlayers.insertRow(row)
                    self.dlg.tblResultlayers.setItem(row,0,QTableWidgetItem(str(OBJECTID)))
                    self.dlg.tblResultlayers.setItem(row,1,QTableWidgetItem(layer.name()))
                    self.dlg.tblResultlayers.setItem(row,2,QTableWidgetItem(str("{:2.5f}".format(percentage))))
        QgsProject.instance().addMapLayer(BufferLayer)
        QgsProject.instance().addMapLayer(LocalisationLayer)



    def exportToPDF(self):
        project = QgsProject.instance()
        layout_manager = project.layoutManager()

        # Remove old layout if exists
        existing_layout = layout_manager.layoutByName("ZoneScanLayout")
        if existing_layout:
            layout_manager.removeLayout(existing_layout)

        # Create new layout
        layout = QgsPrintLayout(project)
        layout.initializeDefaults()
        layout.setName("ZoneScanLayout")
        layout.pageCollection().pages()[0].setPageSize('A4', QgsLayoutItemPage.Orientation.Portrait)
        layout_manager.addLayout(layout)

        page_width = 210  # mm
        margin = 10
        dpi = 96
        pixels_to_mm = 25.4 / dpi

        def get_text_width_mm(text, font):
            return QFontMetrics(font).horizontalAdvance(text) * pixels_to_mm

        # Title
        title_text = "Zone Scan Report"
        title_font = QFont("Arial", 18, QFont.Bold)
        title_width = get_text_width_mm(title_text, title_font)
        title = QgsLayoutItemLabel(layout)
        title.setText(title_text)
        title.setFont(title_font)
        layout.addLayoutItem(title)
        title.attemptMove(QgsLayoutPoint((page_width - title_width) / 2, margin, QgsUnitTypes.LayoutMillimeters))

        # --- Replace Map item with Canvas Screenshot as Image ---

        canvas = self.iface.mapCanvas()
        canvas_size = canvas.size()

        # Capture canvas image
        image = QImage(canvas_size, QImage.Format_ARGB32)
        painter = QPainter(image)
        canvas.render(painter)
        painter.end()

        # Save temporary image file
        import tempfile
        temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
        image_path = temp_file.name
        image.save(image_path)
        temp_file.close()

        # Add image to layout as picture
        picture = QgsLayoutItemPicture(layout)
        picture.setPicturePath(image_path)

        picture_width = 180
        picture_height = 100
        picture_x = (page_width - picture_width) / 2
        picture_y = margin + 20

        layout.addLayoutItem(picture)
        picture.attemptMove(QgsLayoutPoint(picture_x, picture_y, QgsUnitTypes.LayoutMillimeters))
        picture.attemptResize(QgsLayoutSize(picture_width, picture_height, QgsUnitTypes.LayoutMillimeters))

        # Section Title
        section_text = "Intersected Land Parcels"
        section_font = QFont("Arial", 12, QFont.Bold)
        section_width = get_text_width_mm(section_text, section_font)
        section_title = QgsLayoutItemLabel(layout)
        section_title.setText(section_text)
        section_title.setFont(section_font)
        layout.addLayoutItem(section_title)
        section_y = picture_y + picture_height + 10
        section_title.attemptMove(QgsLayoutPoint((page_width - section_width) / 2, section_y, QgsUnitTypes.LayoutMillimeters))

        # Table Rows
        result_table = self.dlg.tblResultlayers
        row_count = result_table.rowCount()
        column_count = result_table.columnCount()
        row_font = QFont("Arial", 10)
        start_y = section_y + 10
        line_height = 7

        for row in range(row_count):
            row_text = []
            for col in range(column_count):
                item = result_table.item(row, col)
                row_text.append(item.text() if item else "")
            text_line = " | ".join(row_text)

            label = QgsLayoutItemLabel(layout)
            label.setText(text_line)
            label.setFont(row_font)
            layout.addLayoutItem(label)
            label_width = get_text_width_mm(text_line, row_font)
            label.attemptMove(QgsLayoutPoint((page_width - label_width) / 2, start_y + row * line_height, QgsUnitTypes.LayoutMillimeters))

        # Export
        output_path = self.dlg.pdfFileWidget.filePath()
        if output_path:
            exporter = QgsLayoutExporter(layout)
            result = exporter.exportToPdf(output_path, QgsLayoutExporter.PdfExportSettings())
            if result == QgsLayoutExporter.Success:
                QMessageBox.information(self.dlg, "Export Successful", "PDF exported successfully!")
            else:
                QMessageBox.warning(self.dlg, "Export Failed", "Failed to export PDF.")




    ################ AYMANE #####################
    def download_dependencies(self):
        print("Installing the modules we neeed: oauthlib and requests_oauthlib..")
        bat = os.path.join(self.plugin_dir, "install_required_libraries.bat")
        subprocess.call([bat], shell=True)
        self.settings.setValue("Zonescan/deps_installed", True)

        try:
            from oauthlib.oauth2 import BackendApplicationClient
            from requests_oauthlib import OAuth2Session
        except Exception as e:
            print("Error importing oauthlib and requests_oauthlib: ", e)
            QMessageBox.warning(self.dlg, "Error", "Error importing oauthlib and requests_oauthlib: " + str(e))
            exit(0)

        print("Done..")

    def load_indexes(self):
        self.index_checkboxes = {}

        self.INDEXES = {
                    # Vegetation Indices
    "NDVI": {
        "formula": "(NIR - Red) / (NIR + Red)",
        "bands": {"NIR": 8, "Red": 4},  # Sentinel-2 bands (adjust for your sensor)
        "output_filename": "ndvi.tiff",
        "description": "Normalized Difference Vegetation Index (healthy vegetation detection)"
    },
    "EVI": {
        "formula": "2.5 * (NIR - Red) / (NIR + 6 * Red - 7.5 * Blue + 1)",
        "bands": {"NIR": 8, "Red": 4, "Blue": 2},
        "output_filename": "evi.tiff",
        "description": "Enhanced Vegetation Index (improves sensitivity in high biomass regions)"
    },
    "SAVI": {
        "formula": "(1 + 0.5) * (NIR - Red) / (NIR + Red + 0.5)",
        "bands": {"NIR": 8, "Red": 4},
        "output_filename": "savi.tiff",
        "description": "Soil-Adjusted Vegetation Index (accounts for soil brightness)",
    },
    "NDWI": {
        "formula": "(Green - NIR) / (Green + NIR)",
        "bands": {"Green": 3, "NIR": 8},
        "output_filename": "ndwi.tiff",
        "description": "Normalized Difference Water Index (water body detection)"
     },
    "MNDWI": {
        "formula": "(Green - SWIR1) / (Green + SWIR1)",
        "bands": {"Green": 3, "SWIR1": 11},
        "output_filename": "mndwi.tiff",
        "description": "Modified NDWI (better water detection, reduces built-up noise)"
    },
    # Urban & Built-up Indices
    "NDBI": {
        "formula": "(SWIR1 - NIR) / (SWIR1 + NIR)",
        "bands": {"SWIR1": 11, "NIR": 8},
        "output_filename": "ndbi.tiff",
        "description": "Normalized Difference Built-up Index (urban area detection)"
    },
    "UI": {
        "formula": "(SWIR2 - NIR) / (SWIR2 + NIR)",
        "bands": {"SWIR2": 12, "NIR": 8},
        "output_filename": "ui.tiff",
        "description": "Urban Index (alternative to NDBI)"
    }
    }
        for index_name, index_data in self.INDEXES.items():
            cb = QCheckBox(index_name)
            label = QLabel(index_data["description"])
            h_layout = QHBoxLayout()
            h_layout.addWidget(cb)
            h_layout.addWidget(label)
            self.dlg.index_layout.addLayout(h_layout)
            self.index_checkboxes[index_name] = cb


    def run_downloads_and_schedule(self):

        # self.dlg.progress_image_sat.setEnabled(True)
        # self.dlg.progress_image_sat.setRange(0, 100)
        self.dlg.progress_image_sat.setValue(0)

        client_id = self.dlg.id.text()
        client_secret = self.dlg.secret.text()
        folder_path = self.dlg.localsave.filePath()
        cloud_cov = self.dlg.cloud_coverage.value()

        if client_id == "":
            client_id = None
            QMessageBox.warning(self.dlg, "No Client ID Selected", "Please enter a Client ID.")
            return
        if client_secret == "":
            client_secret = None
            QMessageBox.warning(self.dlg, "No Client Secret Selected", "Please enter a Client Secret.")
            return
        if folder_path == "":
            folder_path = None
            QMessageBox.warning(self.dlg, "No Index Selected", "Please select a folder path.")
            return

        time_start = self.dlg.start_date.dateTime().toString(Qt.ISODate)+"Z"
        time_end = self.dlg.end_date.dateTime().toString(Qt.ISODate)+"Z"
        # start_dt = self.dlg.start_date.dateTime().toPyDateTime()
        # end_dt = self.dlg.end_date.dateTime().toPyDateTime()

        selected_indexes = [k for k, cb in self.index_checkboxes.items() if cb.isChecked()]
        self.dlg.progress_image_sat.setValue(10)
        if len(selected_indexes) != 0:

            print(client_id, client_secret, cloud_cov)
            downloader = SentinelDownloader(client_id, client_secret)
            downloader.base_dir = folder_path
            print("Base dir: ",downloader.base_dir)

            print("Raw")
            downloader.get_raw(
                filename="raw.tiff",
                time_start=time_start,
                time_end=time_end,
                cloud_coverage=cloud_cov,
                size=(512, 512)
            )
            raw = os.path.join(folder_path, "raw.tiff")
        
            layer_name = "raw"
            print("Loading raw from {}".format(raw))
            raw_layer = QgsRasterLayer(raw, layer_name)
            if not raw_layer.isValid():
                raise Exception("Failed to load raster")

            if not raw_layer.crs().isValid():
                print("CRS NOT VALID!")
                raw_layer.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

            QgsProject.instance().addMapLayer(raw_layer, addToLegend=True)

            provider = raw_layer.dataProvider()
            band_count = provider.bandCount()

            for key in selected_indexes:
                cfg = self.INDEXES[key]

                entries = []
                for letter, bandnum in cfg["bands"].items():
                    if bandnum < 1 or bandnum > band_count:
                        raise Exception(f"Invalid band number {bandnum} for {letter}")

                    entry = QgsRasterCalculatorEntry()
                    entry.ref = f"{layer_name}@{letter}"
                    entry.raster = raw_layer
                    entry.bandNumber = bandnum
                    entries.append(entry)

                expr = cfg["formula"]
                for letter in cfg["bands"].keys():
                    expr = expr.replace(letter, f'"{layer_name}@{letter}"')

                out_path = os.path.join(folder_path, cfg["output_filename"])
                self.dlg.progress_image_sat.setValue(20)
                print("Creating QgsRasterCalculator with:")
                print(f"  Expression: {expr}")
                print(f"  Output: {out_path}")
                print(f"  Extent: {raw_layer.extent()}")
                print(f"  Size: {raw_layer.width()} x {raw_layer.height()}")
                print(f"  Entries: {[e.ref for e in entries]}")

                calc = QgsRasterCalculator(
                    expr,
                    out_path,
                    "GTiff",
                    raw_layer.extent(),
                    raw_layer.width(),
                    raw_layer.height(),
                    entries,
                    QgsProject.instance().transformContext()
                )
                res = calc.processCalculation()
                print(calc.lastError())
                # self.iface.addRasterLayer(out_path)
                if res != 0:
                    raise Exception(f"{key} calculation failed (code {res})")
            
                QgsProject.instance().addMapLayer(QgsRasterLayer(out_path, key), addToLegend=True)

                self.dlg.progress_image_sat.setValue(30)
            
            print("Done with index calculations...")            

        if self.dlg.checkbox_schedule.isChecked():
            # check current system
            if platform.system() == "Windows":
                print("Schedule options enabled")
                print("Windows system detected")
                self.dlg.progress_image_sat.setValue(60)

                frequency_unit = self.dlg.frequency_combo.currentText().lower()

                try:
                    frequency_value = int(self.dlg.value.text())
                except:
                    print("Error in the value, defaulting to 1..")
                    frequency_value = 1

                options = []
                if self.dlg.rgb_checkbox.isChecked():
                    options.append("rgb")
                if self.dlg.raw_checkbox.isChecked():
                    options.append("raw")
                if self.dlg.ndvi_checkbox.isChecked():
                    options.append("ndvi")

                print("Time start: ", time_start)
                print("Time end: ", time_end)
                print("Frequency unit: ", frequency_unit)
                print("Frequency value: ", frequency_value)

                # time_ranges = get_time_ranges(start_dt, end_dt, frequency_unit, frequency_value)

                # for from_time, to_time in time_ranges:
                #     print(f"Requesting from {from_time} to {to_time}")

                job_id = time_start + "_" + time_end+ "_" + frequency_unit + "_" + str(frequency_value)+ "_" + str(cloud_cov)
                job_id = job_id.replace(":", "_")
                job_id = job_id.replace(" ", "_")
                job_id = job_id.replace("-", "_")

                self.dlg.progress_image_sat.setValue(80)

                print("Job ID: ", job_id)
                vbs_path = write_download_script(job_id, client_id, client_secret, cloud_cov, folder_path, options, 
                                    jobs_dir=self.jobs_dir)
                # C:\Users\dell\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\QGIS-Zone-Scan\zone_scan.py
                create_windows_task(f"geotask_{job_id}", time_start, time_end, vbs_path, frequency_unit, frequency_value)
                QMessageBox.information(self.dlg, "Job Scheduled", f"Job scheduled with ID: {job_id}")
            else:
                QMessageBox.warning(self.dlg, "You need to Windows to use schedule downloads!")

        else:
            print(client_id, client_secret, cloud_cov)
            downloader = SentinelDownloader(client_id, client_secret)
            downloader.base_dir = folder_path
            print("Base dir: ",downloader.base_dir)


            self.dlg.progress_image_sat.setValue(50)



            if self.dlg.rgb_checkbox.isChecked():
                print("RGB")
                downloader.get_rgb(
                    filename="rgb.tiff",
                    time_start=time_start,
                    time_end=time_end,
                    cloud_coverage=cloud_cov,
                    size=(512, 512)
                )
                QgsProject.instance().addMapLayer(QgsRasterLayer(os.path.join(downloader.base_dir, "rgb.tiff"), "RGB_ONLY"), addToLegend=True)

            self.dlg.progress_image_sat.setValue(70)
            if self.dlg.raw_checkbox.isChecked():
                print("Raw")
                downloader.get_raw(
                    filename="raw.tiff",
                    time_start=time_start,
                    time_end=time_end,
                    cloud_coverage=cloud_cov,
                    size=(512, 512)
                )
                QgsProject.instance().addMapLayer(QgsRasterLayer(os.path.join(downloader.base_dir, "raw.tiff"), "RAW_ONLY"), addToLegend=True)


            if self.dlg.ndvi_checkbox.isChecked():
                print("NDVI")
                downloader.get_ndvi(
                    filename="ndvi.tiff",
                    time_start=time_start,
                    time_end=time_end,
                    cloud_coverage=cloud_cov,
                    size=(512, 512)
                )
                QgsProject.instance().addMapLayer(QgsRasterLayer(os.path.join(downloader.base_dir, "ndvi.tiff"), "NDVI_ONLY"), addToLegend=True)
                self.dlg.progress_image_sat.setValue(90)
        self.dlg.progress_image_sat.setValue(100)

    def enable_schedule_options(self):

        print("enabling schedule options")
        if self.dlg.checkbox_schedule.isChecked():
            self.dlg.frequency_combo.setEnabled(True)
            self.dlg.value.setEnabled(True)
        else:
            self.dlg.frequency_combo.setEnabled(False)
            self.dlg.value.setEnabled(False)
    ############################################
        
