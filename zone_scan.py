# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Zonescan
                                 A QGIS plugin
 Point selection, buffer creation, intersection analysis, and reporting
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Adnan Benaboud
        email                : adnanbenaboud5@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor, QFont, QPixmap
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QMessageBox
from qgis.core import QgsMapLayerProxyModel, QgsProject, QgsVectorLayer, QgsGeometry, QgsPointXY, QgsFeature, QgsDistanceArea, QgsLayout, QgsLayoutItemMap, QgsLayoutItemLabel,QgsLayoutPoint, QgsLayoutSize, QgsUnitTypes, QgsLayoutExporter, QgsLayoutItemPicture, QgsPrintLayout
import tempfile


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .zone_scan_dialog import ZonescanDialog
import os.path


from qgis.gui import QgsMapToolEmitPoint


class Zonescan:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = self.iface.mapCanvas()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        self.addPoint = QgsMapToolEmitPoint(self.canvas)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Zonescan_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Zone Scan')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Zonescan', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/zone_scan/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Zone Scan'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Zone Scan'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ZonescanDialog()
            self.dlg.btnSelect.clicked.connect(self.clickingSelect)
            self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dlg.pdfFileWidget.setFilter("PDF (*.pdf)")
            self.dlg.btnCancel.clicked.connect(self.cancel)
            self.dlg.btnAddAllLayers.clicked.connect(self.addAllLayers)
            self.dlg.btnAddLayer.clicked.connect(self.addSepartly)
            self.dlg.btnDelete.clicked.connect(self.On_Delete_Click)
            self.dlg.btnAnalyze.clicked.connect(self.analyze)
            self.dlg.btnGenereatePdf.clicked.connect(self.exportToPDF)


        
        self.reset_ui()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def reset_ui(self):
        self.dlg.spnboxLat.setValue(0.0)
        self.dlg.spnboxLon.setValue(0.0)
        self.dlg.spnboxBuffer.setValue(0.0)

        self.dlg.tblLayers.setRowCount(0)

        self.dlg.tblResultlayers.setRowCount(0)

        self.dlg.bufferNameLayer.setText("Buffer Layer")
        self.dlg.pointNameLayer.setText("Point Layer")

    def cancel(self):
        self.reset_ui()
        self.dlg.close()

  
    def evaluatePoint(self,point,button):
        self.dlg.spnboxLat.setValue(point.y())
        self.dlg.spnboxLon.setValue(point.x())
        self.dlg.show()

        self.addPoint.canvasClicked.disconnect(self.evaluatePoint)
        self.iface.mapCanvas().unsetMapTool(self.addPoint)

    def clickingSelect(self):
        self.dlg.hide()
        self.canvas.setMapTool(self.addPoint)
        try:
            self.addPoint.canvasClicked.disconnect()
        except:
            pass
        self.addPoint.canvasClicked.connect(self.evaluatePoint)

    def addAllLayers(self):
        layers = QgsProject.instance().mapLayers().values()
    
        for layer in layers:
            if isinstance(layer, QgsVectorLayer):
                row = self.dlg.tblLayers.rowCount()
                self.dlg.tblLayers.insertRow(row)
                self.dlg.tblLayers.setItem(row,0,QTableWidgetItem(layer.name()))

    def addSepartly(self):
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        row = self.dlg.tblLayers.rowCount()
        self.dlg.tblLayers.insertRow(row)
        self.dlg.tblLayers.setItem(row,0,QTableWidgetItem(layer.name()))

        


    def On_Delete_Click(self):
        SelectedRow = self.dlg.tblLayers.currentRow()
        rowcount = self.dlg.tblLayers.rowCount()

        if rowcount==0:  # gives a pop up when now more rows are there to delete
            QMessageBox.information(self.dlg,'Delete Layer',"No more rows to delete!")



        elif SelectedRow==-1: # Gives pop up when no rows are selected
            QMessageBox.information(self.dlg,'Delete Layer',"Please select the row to be deleted!")


        else:
            self.dlg.tblLayers.removeRow(SelectedRow)

    def analyze(self):
        all_layers = QgsProject().instance().mapLayers().values()
        layers_in_name = []
        layers_in = []
        row = self.dlg.tblLayers.rowCount()
        for i in range(row):
            item = self.dlg.tblLayers.item(i, 0)
            if item is not None:
                layers_in_name.append(item.text())

        for i in all_layers:
            if i.name() in layers_in_name:
                layers_in.append(i)


        project_crs = QgsProject().instance().crs().authid()
        uri = "polygon?crs="+str(project_crs).lower()+"&field=id:integer"
        uri_point = "point?crs="+str(project_crs).lower()+"&field=id:integer"
        BufferLayer = QgsVectorLayer(uri, self.dlg.bufferNameLayer.text(),  "memory")
        LocalisationLayer = QgsVectorLayer(uri_point, self.dlg.pointNameLayer.text(),  "memory")


        if not BufferLayer.isValid():
            print("Buffer layer creation failed!")
            return
        if not LocalisationLayer.isValid():
            print("Point layer creation failed!")
            return
        

        valLat = self.dlg.spnboxLat.value()
        valLon = self.dlg.spnboxLon.value()
        valBuffer = self.dlg.spnboxBuffer.value()

        point = QgsPointXY(valLon, valLat)
        geom = QgsGeometry.fromPointXY(point)

        buffer = geom.buffer(valBuffer,20)

        ftrPoint = QgsFeature(LocalisationLayer.fields())
        ftrPoint.setAttribute("id",1)
        ftrPoint.setGeometry(geom)

        ftrBuffer = QgsFeature(BufferLayer.fields())
        ftrBuffer.setAttribute("id",1)
        ftrBuffer.setGeometry(buffer)

        pr = LocalisationLayer.dataProvider()
        pr.addFeatures([ftrPoint])

        pr = BufferLayer.dataProvider()
        pr.addFeatures([ftrBuffer])
        symbol_layer = BufferLayer.renderer().symbol().symbolLayer(0)
        symbol_layer.setFillColor(QColor(0, 0, 0, 0))  # fully transparent fill
        symbol_layer.setStrokeColor(QColor("red"))
        symbol_layer.setStrokeWidth(1.0)
        BufferLayer.triggerRepaint()
        BufferLayer.reload()

        bb = buffer.boundingBox()

        for layer in layers_in:
            layer_in_bb = layer.getFeatures(bb)
            for feature in layer_in_bb:
                OBJECTID = feature.attribute("OBJECTID")
                Distance = feature.geometry().distance(geom)
                disarea = QgsDistanceArea()
                total_area = disarea.measureArea(feature.geometry())
                intersection = feature.geometry().intersection(buffer)
                intersection_area = disarea.measureArea(intersection)
                percentage = (intersection_area/total_area)*100
                if Distance < valBuffer:
                    row = self.dlg.tblResultlayers.rowCount()
                    self.dlg.tblResultlayers.insertRow(row)
                    self.dlg.tblResultlayers.setItem(row,0,QTableWidgetItem(str(OBJECTID)))
                    self.dlg.tblResultlayers.setItem(row,1,QTableWidgetItem(layer.name()))
                    self.dlg.tblResultlayers.setItem(row,2,QTableWidgetItem(str("{:2.5f}".format(percentage))))
        QgsProject.instance().addMapLayer(BufferLayer)
        QgsProject.instance().addMapLayer(LocalisationLayer)



    def exportToPDF(self):
        project = QgsProject.instance()
        layout = QgsLayout(project)
        layout.initializeDefaults()
        layout = QgsPrintLayout(project)
        layout.initializeDefaults()
        layout.setName("ZoneScanLayout")

        layout_manager = project.layoutManager()
        layout_manager.addLayout(layout)

        # Map Item
        map_item = QgsLayoutItemMap(layout)
        map_item.setExtent(self.iface.mapCanvas().extent())
        map_item.setRect(20, 20, 200, 100)
        map_item.attemptMove(QgsLayoutPoint(10, 10, QgsUnitTypes.LayoutMillimeters))
        map_item.attemptResize(QgsLayoutSize(180, 90, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(map_item)

        # Title
        title = QgsLayoutItemLabel(layout)
        title.setText("Zone Scan Report")
        title.setFont(QFont("Arial", 18))
        title.adjustSizeToText()
        title.attemptMove(QgsLayoutPoint(10, 5, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(title)

        # ---- Render QTableWidget to image ----
        result_table = self.dlg.tblResultlayers
        table_pixmap = QPixmap(result_table.size())
        result_table.render(table_pixmap)

        temp_dir = tempfile.gettempdir()
        table_image_path = os.path.join(temp_dir, "result_table.png")
        table_pixmap.save(table_image_path)

        # Add Picture of table
        table_pic = QgsLayoutItemPicture(layout)
        table_pic.setPicturePath(table_image_path)
        table_pic.attemptMove(QgsLayoutPoint(10, 105, QgsUnitTypes.LayoutMillimeters))
        table_pic.attemptResize(QgsLayoutSize(180, 60, QgsUnitTypes.LayoutMillimeters))
        layout.addLayoutItem(table_pic)

        # Export
        output_path = self.dlg.pdfFileWidget.filePath()
        if output_path:
            exporter = QgsLayoutExporter(layout)
            result = exporter.exportToPdf(output_path, QgsLayoutExporter.PdfExportSettings())
            if result == QgsLayoutExporter.Success:
                QMessageBox.information(self.dlg, "Export Successful", "PDF exported successfully!")
            else:
                QMessageBox.warning(self.dlg, "Export Failed", "Failed to export PDF.")


        

        

        
